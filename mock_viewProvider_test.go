// Code generated by mockery v2.46.2. DO NOT EDIT.

package gocb

import mock "github.com/stretchr/testify/mock"

// mockViewProvider is an autogenerated mock type for the viewProvider type
type mockViewProvider struct {
	mock.Mock
}

// ViewQuery provides a mock function with given fields: designDoc, viewName, opts
func (_m *mockViewProvider) ViewQuery(designDoc string, viewName string, opts *ViewOptions) (*ViewResult, error) {
	ret := _m.Called(designDoc, viewName, opts)

	if len(ret) == 0 {
		panic("no return value specified for ViewQuery")
	}

	var r0 *ViewResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *ViewOptions) (*ViewResult, error)); ok {
		return rf(designDoc, viewName, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, *ViewOptions) *ViewResult); ok {
		r0 = rf(designDoc, viewName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ViewResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *ViewOptions) error); ok {
		r1 = rf(designDoc, viewName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockViewProvider creates a new instance of mockViewProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockViewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockViewProvider {
	mock := &mockViewProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
