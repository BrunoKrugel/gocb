// Code generated by mockery v2.46.2. DO NOT EDIT.

package gocb

import mock "github.com/stretchr/testify/mock"

// mockAnalyticsProvider is an autogenerated mock type for the analyticsProvider type
type mockAnalyticsProvider struct {
	mock.Mock
}

// AnalyticsQuery provides a mock function with given fields: statement, scope, opts
func (_m *mockAnalyticsProvider) AnalyticsQuery(statement string, scope *Scope, opts *AnalyticsOptions) (*AnalyticsResult, error) {
	ret := _m.Called(statement, scope, opts)

	if len(ret) == 0 {
		panic("no return value specified for AnalyticsQuery")
	}

	var r0 *AnalyticsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *Scope, *AnalyticsOptions) (*AnalyticsResult, error)); ok {
		return rf(statement, scope, opts)
	}
	if rf, ok := ret.Get(0).(func(string, *Scope, *AnalyticsOptions) *AnalyticsResult); ok {
		r0 = rf(statement, scope, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AnalyticsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *Scope, *AnalyticsOptions) error); ok {
		r1 = rf(statement, scope, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockAnalyticsProvider creates a new instance of mockAnalyticsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAnalyticsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAnalyticsProvider {
	mock := &mockAnalyticsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
